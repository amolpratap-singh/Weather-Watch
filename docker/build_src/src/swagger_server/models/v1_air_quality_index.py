# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.v1_air_quality_index_components import V1AirQualityIndexComponents  # noqa: F401,E501
from swagger_server.models.v1_air_quality_index_location import V1AirQualityIndexLocation  # noqa: F401,E501
from swagger_server import util


class V1AirQualityIndex(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, aqi: int=None, components: V1AirQualityIndexComponents=None, dt: int=None, epoch_time: int=None, event_time: datetime=None, location: V1AirQualityIndexLocation=None):  # noqa: E501
        """V1AirQualityIndex - a model defined in Swagger

        :param aqi: The aqi of this V1AirQualityIndex.  # noqa: E501
        :type aqi: int
        :param components: The components of this V1AirQualityIndex.  # noqa: E501
        :type components: V1AirQualityIndexComponents
        :param dt: The dt of this V1AirQualityIndex.  # noqa: E501
        :type dt: int
        :param epoch_time: The epoch_time of this V1AirQualityIndex.  # noqa: E501
        :type epoch_time: int
        :param event_time: The event_time of this V1AirQualityIndex.  # noqa: E501
        :type event_time: datetime
        :param location: The location of this V1AirQualityIndex.  # noqa: E501
        :type location: V1AirQualityIndexLocation
        """
        self.swagger_types = {
            'aqi': int,
            'components': V1AirQualityIndexComponents,
            'dt': int,
            'epoch_time': int,
            'event_time': datetime,
            'location': V1AirQualityIndexLocation
        }

        self.attribute_map = {
            'aqi': 'aqi',
            'components': 'components',
            'dt': 'dt',
            'epoch_time': 'epochTime',
            'event_time': 'eventTime',
            'location': 'location'
        }
        self._aqi = aqi
        self._components = components
        self._dt = dt
        self._epoch_time = epoch_time
        self._event_time = event_time
        self._location = location

    @classmethod
    def from_dict(cls, dikt) -> 'V1AirQualityIndex':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V1AirQualityIndex of this V1AirQualityIndex.  # noqa: E501
        :rtype: V1AirQualityIndex
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aqi(self) -> int:
        """Gets the aqi of this V1AirQualityIndex.


        :return: The aqi of this V1AirQualityIndex.
        :rtype: int
        """
        return self._aqi

    @aqi.setter
    def aqi(self, aqi: int):
        """Sets the aqi of this V1AirQualityIndex.


        :param aqi: The aqi of this V1AirQualityIndex.
        :type aqi: int
        """
        if aqi is None:
            raise ValueError("Invalid value for `aqi`, must not be `None`")  # noqa: E501

        self._aqi = aqi

    @property
    def components(self) -> V1AirQualityIndexComponents:
        """Gets the components of this V1AirQualityIndex.


        :return: The components of this V1AirQualityIndex.
        :rtype: V1AirQualityIndexComponents
        """
        return self._components

    @components.setter
    def components(self, components: V1AirQualityIndexComponents):
        """Sets the components of this V1AirQualityIndex.


        :param components: The components of this V1AirQualityIndex.
        :type components: V1AirQualityIndexComponents
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")  # noqa: E501

        self._components = components

    @property
    def dt(self) -> int:
        """Gets the dt of this V1AirQualityIndex.


        :return: The dt of this V1AirQualityIndex.
        :rtype: int
        """
        return self._dt

    @dt.setter
    def dt(self, dt: int):
        """Sets the dt of this V1AirQualityIndex.


        :param dt: The dt of this V1AirQualityIndex.
        :type dt: int
        """
        if dt is None:
            raise ValueError("Invalid value for `dt`, must not be `None`")  # noqa: E501

        self._dt = dt

    @property
    def epoch_time(self) -> int:
        """Gets the epoch_time of this V1AirQualityIndex.


        :return: The epoch_time of this V1AirQualityIndex.
        :rtype: int
        """
        return self._epoch_time

    @epoch_time.setter
    def epoch_time(self, epoch_time: int):
        """Sets the epoch_time of this V1AirQualityIndex.


        :param epoch_time: The epoch_time of this V1AirQualityIndex.
        :type epoch_time: int
        """
        if epoch_time is None:
            raise ValueError("Invalid value for `epoch_time`, must not be `None`")  # noqa: E501

        self._epoch_time = epoch_time

    @property
    def event_time(self) -> datetime:
        """Gets the event_time of this V1AirQualityIndex.


        :return: The event_time of this V1AirQualityIndex.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time: datetime):
        """Sets the event_time of this V1AirQualityIndex.


        :param event_time: The event_time of this V1AirQualityIndex.
        :type event_time: datetime
        """
        if event_time is None:
            raise ValueError("Invalid value for `event_time`, must not be `None`")  # noqa: E501

        self._event_time = event_time

    @property
    def location(self) -> V1AirQualityIndexLocation:
        """Gets the location of this V1AirQualityIndex.


        :return: The location of this V1AirQualityIndex.
        :rtype: V1AirQualityIndexLocation
        """
        return self._location

    @location.setter
    def location(self, location: V1AirQualityIndexLocation):
        """Sets the location of this V1AirQualityIndex.


        :param location: The location of this V1AirQualityIndex.
        :type location: V1AirQualityIndexLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location
