# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V1AirQualityIndexComponents(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, co: float=None, nh3: float=None, nitric_oxide: float=None, no2: float=None, o3: float=None, so2: float=None, pm10: float=None, pm2_5: float=None):  # noqa: E501
        """V1AirQualityIndexComponents - a model defined in Swagger

        :param co: The co of this V1AirQualityIndexComponents.  # noqa: E501
        :type co: float
        :param nh3: The nh3 of this V1AirQualityIndexComponents.  # noqa: E501
        :type nh3: float
        :param nitric_oxide: The nitric_oxide of this V1AirQualityIndexComponents.  # noqa: E501
        :type nitric_oxide: float
        :param no2: The no2 of this V1AirQualityIndexComponents.  # noqa: E501
        :type no2: float
        :param o3: The o3 of this V1AirQualityIndexComponents.  # noqa: E501
        :type o3: float
        :param so2: The so2 of this V1AirQualityIndexComponents.  # noqa: E501
        :type so2: float
        :param pm10: The pm10 of this V1AirQualityIndexComponents.  # noqa: E501
        :type pm10: float
        :param pm2_5: The pm2_5 of this V1AirQualityIndexComponents.  # noqa: E501
        :type pm2_5: float
        """
        self.swagger_types = {
            'co': float,
            'nh3': float,
            'nitric_oxide': float,
            'no2': float,
            'o3': float,
            'so2': float,
            'pm10': float,
            'pm2_5': float
        }

        self.attribute_map = {
            'co': 'Co',
            'nh3': 'Nh3',
            'nitric_oxide': 'NitricOxide',
            'no2': 'No2',
            'o3': 'O3',
            'so2': 'So2',
            'pm10': 'pm10',
            'pm2_5': 'pm2_5'
        }
        self._co = co
        self._nh3 = nh3
        self._nitric_oxide = nitric_oxide
        self._no2 = no2
        self._o3 = o3
        self._so2 = so2
        self._pm10 = pm10
        self._pm2_5 = pm2_5

    @classmethod
    def from_dict(cls, dikt) -> 'V1AirQualityIndexComponents':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V1AirQualityIndex_components of this V1AirQualityIndexComponents.  # noqa: E501
        :rtype: V1AirQualityIndexComponents
        """
        return util.deserialize_model(dikt, cls)

    @property
    def co(self) -> float:
        """Gets the co of this V1AirQualityIndexComponents.


        :return: The co of this V1AirQualityIndexComponents.
        :rtype: float
        """
        return self._co

    @co.setter
    def co(self, co: float):
        """Sets the co of this V1AirQualityIndexComponents.


        :param co: The co of this V1AirQualityIndexComponents.
        :type co: float
        """
        if co is None:
            raise ValueError("Invalid value for `co`, must not be `None`")  # noqa: E501

        self._co = co

    @property
    def nh3(self) -> float:
        """Gets the nh3 of this V1AirQualityIndexComponents.


        :return: The nh3 of this V1AirQualityIndexComponents.
        :rtype: float
        """
        return self._nh3

    @nh3.setter
    def nh3(self, nh3: float):
        """Sets the nh3 of this V1AirQualityIndexComponents.


        :param nh3: The nh3 of this V1AirQualityIndexComponents.
        :type nh3: float
        """
        if nh3 is None:
            raise ValueError("Invalid value for `nh3`, must not be `None`")  # noqa: E501

        self._nh3 = nh3

    @property
    def nitric_oxide(self) -> float:
        """Gets the nitric_oxide of this V1AirQualityIndexComponents.


        :return: The nitric_oxide of this V1AirQualityIndexComponents.
        :rtype: float
        """
        return self._nitric_oxide

    @nitric_oxide.setter
    def nitric_oxide(self, nitric_oxide: float):
        """Sets the nitric_oxide of this V1AirQualityIndexComponents.


        :param nitric_oxide: The nitric_oxide of this V1AirQualityIndexComponents.
        :type nitric_oxide: float
        """
        if nitric_oxide is None:
            raise ValueError("Invalid value for `nitric_oxide`, must not be `None`")  # noqa: E501

        self._nitric_oxide = nitric_oxide

    @property
    def no2(self) -> float:
        """Gets the no2 of this V1AirQualityIndexComponents.


        :return: The no2 of this V1AirQualityIndexComponents.
        :rtype: float
        """
        return self._no2

    @no2.setter
    def no2(self, no2: float):
        """Sets the no2 of this V1AirQualityIndexComponents.


        :param no2: The no2 of this V1AirQualityIndexComponents.
        :type no2: float
        """
        if no2 is None:
            raise ValueError("Invalid value for `no2`, must not be `None`")  # noqa: E501

        self._no2 = no2

    @property
    def o3(self) -> float:
        """Gets the o3 of this V1AirQualityIndexComponents.


        :return: The o3 of this V1AirQualityIndexComponents.
        :rtype: float
        """
        return self._o3

    @o3.setter
    def o3(self, o3: float):
        """Sets the o3 of this V1AirQualityIndexComponents.


        :param o3: The o3 of this V1AirQualityIndexComponents.
        :type o3: float
        """
        if o3 is None:
            raise ValueError("Invalid value for `o3`, must not be `None`")  # noqa: E501

        self._o3 = o3

    @property
    def so2(self) -> float:
        """Gets the so2 of this V1AirQualityIndexComponents.


        :return: The so2 of this V1AirQualityIndexComponents.
        :rtype: float
        """
        return self._so2

    @so2.setter
    def so2(self, so2: float):
        """Sets the so2 of this V1AirQualityIndexComponents.


        :param so2: The so2 of this V1AirQualityIndexComponents.
        :type so2: float
        """
        if so2 is None:
            raise ValueError("Invalid value for `so2`, must not be `None`")  # noqa: E501

        self._so2 = so2

    @property
    def pm10(self) -> float:
        """Gets the pm10 of this V1AirQualityIndexComponents.


        :return: The pm10 of this V1AirQualityIndexComponents.
        :rtype: float
        """
        return self._pm10

    @pm10.setter
    def pm10(self, pm10: float):
        """Sets the pm10 of this V1AirQualityIndexComponents.


        :param pm10: The pm10 of this V1AirQualityIndexComponents.
        :type pm10: float
        """
        if pm10 is None:
            raise ValueError("Invalid value for `pm10`, must not be `None`")  # noqa: E501

        self._pm10 = pm10

    @property
    def pm2_5(self) -> float:
        """Gets the pm2_5 of this V1AirQualityIndexComponents.


        :return: The pm2_5 of this V1AirQualityIndexComponents.
        :rtype: float
        """
        return self._pm2_5

    @pm2_5.setter
    def pm2_5(self, pm2_5: float):
        """Sets the pm2_5 of this V1AirQualityIndexComponents.


        :param pm2_5: The pm2_5 of this V1AirQualityIndexComponents.
        :type pm2_5: float
        """
        if pm2_5 is None:
            raise ValueError("Invalid value for `pm2_5`, must not be `None`")  # noqa: E501

        self._pm2_5 = pm2_5
