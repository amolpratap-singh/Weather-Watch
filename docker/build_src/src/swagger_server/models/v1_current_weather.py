# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.v1_air_quality_index_location import V1AirQualityIndexLocation  # noqa: F401,E501
from swagger_server.models.v1_current_weather_weather import V1CurrentWeatherWeather  # noqa: F401,E501
from swagger_server.models.v1_current_weather_wind import V1CurrentWeatherWind  # noqa: F401,E501
from swagger_server import util


class V1CurrentWeather(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, description: str=None, dt: int=None, epoch_time: int=None, event_time: datetime=None, location: V1AirQualityIndexLocation=None, timezone: int=None, weather: V1CurrentWeatherWeather=None, weather_code: int=None, wind: V1CurrentWeatherWind=None):  # noqa: E501
        """V1CurrentWeather - a model defined in Swagger

        :param description: The description of this V1CurrentWeather.  # noqa: E501
        :type description: str
        :param dt: The dt of this V1CurrentWeather.  # noqa: E501
        :type dt: int
        :param epoch_time: The epoch_time of this V1CurrentWeather.  # noqa: E501
        :type epoch_time: int
        :param event_time: The event_time of this V1CurrentWeather.  # noqa: E501
        :type event_time: datetime
        :param location: The location of this V1CurrentWeather.  # noqa: E501
        :type location: V1AirQualityIndexLocation
        :param timezone: The timezone of this V1CurrentWeather.  # noqa: E501
        :type timezone: int
        :param weather: The weather of this V1CurrentWeather.  # noqa: E501
        :type weather: V1CurrentWeatherWeather
        :param weather_code: The weather_code of this V1CurrentWeather.  # noqa: E501
        :type weather_code: int
        :param wind: The wind of this V1CurrentWeather.  # noqa: E501
        :type wind: V1CurrentWeatherWind
        """
        self.swagger_types = {
            'description': str,
            'dt': int,
            'epoch_time': int,
            'event_time': datetime,
            'location': V1AirQualityIndexLocation,
            'timezone': int,
            'weather': V1CurrentWeatherWeather,
            'weather_code': int,
            'wind': V1CurrentWeatherWind
        }

        self.attribute_map = {
            'description': 'description',
            'dt': 'dt',
            'epoch_time': 'epochTime',
            'event_time': 'eventTime',
            'location': 'location',
            'timezone': 'timezone',
            'weather': 'weather',
            'weather_code': 'weatherCode',
            'wind': 'wind'
        }
        self._description = description
        self._dt = dt
        self._epoch_time = epoch_time
        self._event_time = event_time
        self._location = location
        self._timezone = timezone
        self._weather = weather
        self._weather_code = weather_code
        self._wind = wind

    @classmethod
    def from_dict(cls, dikt) -> 'V1CurrentWeather':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V1CurrentWeather of this V1CurrentWeather.  # noqa: E501
        :rtype: V1CurrentWeather
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this V1CurrentWeather.


        :return: The description of this V1CurrentWeather.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this V1CurrentWeather.


        :param description: The description of this V1CurrentWeather.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def dt(self) -> int:
        """Gets the dt of this V1CurrentWeather.


        :return: The dt of this V1CurrentWeather.
        :rtype: int
        """
        return self._dt

    @dt.setter
    def dt(self, dt: int):
        """Sets the dt of this V1CurrentWeather.


        :param dt: The dt of this V1CurrentWeather.
        :type dt: int
        """
        if dt is None:
            raise ValueError("Invalid value for `dt`, must not be `None`")  # noqa: E501

        self._dt = dt

    @property
    def epoch_time(self) -> int:
        """Gets the epoch_time of this V1CurrentWeather.


        :return: The epoch_time of this V1CurrentWeather.
        :rtype: int
        """
        return self._epoch_time

    @epoch_time.setter
    def epoch_time(self, epoch_time: int):
        """Sets the epoch_time of this V1CurrentWeather.


        :param epoch_time: The epoch_time of this V1CurrentWeather.
        :type epoch_time: int
        """
        if epoch_time is None:
            raise ValueError("Invalid value for `epoch_time`, must not be `None`")  # noqa: E501

        self._epoch_time = epoch_time

    @property
    def event_time(self) -> datetime:
        """Gets the event_time of this V1CurrentWeather.


        :return: The event_time of this V1CurrentWeather.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time: datetime):
        """Sets the event_time of this V1CurrentWeather.


        :param event_time: The event_time of this V1CurrentWeather.
        :type event_time: datetime
        """
        if event_time is None:
            raise ValueError("Invalid value for `event_time`, must not be `None`")  # noqa: E501

        self._event_time = event_time

    @property
    def location(self) -> V1AirQualityIndexLocation:
        """Gets the location of this V1CurrentWeather.


        :return: The location of this V1CurrentWeather.
        :rtype: V1AirQualityIndexLocation
        """
        return self._location

    @location.setter
    def location(self, location: V1AirQualityIndexLocation):
        """Sets the location of this V1CurrentWeather.


        :param location: The location of this V1CurrentWeather.
        :type location: V1AirQualityIndexLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def timezone(self) -> int:
        """Gets the timezone of this V1CurrentWeather.


        :return: The timezone of this V1CurrentWeather.
        :rtype: int
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: int):
        """Sets the timezone of this V1CurrentWeather.


        :param timezone: The timezone of this V1CurrentWeather.
        :type timezone: int
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def weather(self) -> V1CurrentWeatherWeather:
        """Gets the weather of this V1CurrentWeather.


        :return: The weather of this V1CurrentWeather.
        :rtype: V1CurrentWeatherWeather
        """
        return self._weather

    @weather.setter
    def weather(self, weather: V1CurrentWeatherWeather):
        """Sets the weather of this V1CurrentWeather.


        :param weather: The weather of this V1CurrentWeather.
        :type weather: V1CurrentWeatherWeather
        """
        if weather is None:
            raise ValueError("Invalid value for `weather`, must not be `None`")  # noqa: E501

        self._weather = weather

    @property
    def weather_code(self) -> int:
        """Gets the weather_code of this V1CurrentWeather.


        :return: The weather_code of this V1CurrentWeather.
        :rtype: int
        """
        return self._weather_code

    @weather_code.setter
    def weather_code(self, weather_code: int):
        """Sets the weather_code of this V1CurrentWeather.


        :param weather_code: The weather_code of this V1CurrentWeather.
        :type weather_code: int
        """
        if weather_code is None:
            raise ValueError("Invalid value for `weather_code`, must not be `None`")  # noqa: E501

        self._weather_code = weather_code

    @property
    def wind(self) -> V1CurrentWeatherWind:
        """Gets the wind of this V1CurrentWeather.


        :return: The wind of this V1CurrentWeather.
        :rtype: V1CurrentWeatherWind
        """
        return self._wind

    @wind.setter
    def wind(self, wind: V1CurrentWeatherWind):
        """Sets the wind of this V1CurrentWeather.


        :param wind: The wind of this V1CurrentWeather.
        :type wind: V1CurrentWeatherWind
        """
        if wind is None:
            raise ValueError("Invalid value for `wind`, must not be `None`")  # noqa: E501

        self._wind = wind
