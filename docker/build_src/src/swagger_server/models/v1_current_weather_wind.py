# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V1CurrentWeatherWind(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, deg: int=None, gust: float=None, speed: float=None):  # noqa: E501
        """V1CurrentWeatherWind - a model defined in Swagger

        :param deg: The deg of this V1CurrentWeatherWind.  # noqa: E501
        :type deg: int
        :param gust: The gust of this V1CurrentWeatherWind.  # noqa: E501
        :type gust: float
        :param speed: The speed of this V1CurrentWeatherWind.  # noqa: E501
        :type speed: float
        """
        self.swagger_types = {
            'deg': int,
            'gust': float,
            'speed': float
        }

        self.attribute_map = {
            'deg': 'deg',
            'gust': 'gust',
            'speed': 'speed'
        }
        self._deg = deg
        self._gust = gust
        self._speed = speed

    @classmethod
    def from_dict(cls, dikt) -> 'V1CurrentWeatherWind':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V1CurrentWeather_wind of this V1CurrentWeatherWind.  # noqa: E501
        :rtype: V1CurrentWeatherWind
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deg(self) -> int:
        """Gets the deg of this V1CurrentWeatherWind.


        :return: The deg of this V1CurrentWeatherWind.
        :rtype: int
        """
        return self._deg

    @deg.setter
    def deg(self, deg: int):
        """Sets the deg of this V1CurrentWeatherWind.


        :param deg: The deg of this V1CurrentWeatherWind.
        :type deg: int
        """
        if deg is None:
            raise ValueError("Invalid value for `deg`, must not be `None`")  # noqa: E501

        self._deg = deg

    @property
    def gust(self) -> float:
        """Gets the gust of this V1CurrentWeatherWind.


        :return: The gust of this V1CurrentWeatherWind.
        :rtype: float
        """
        return self._gust

    @gust.setter
    def gust(self, gust: float):
        """Sets the gust of this V1CurrentWeatherWind.


        :param gust: The gust of this V1CurrentWeatherWind.
        :type gust: float
        """
        if gust is None:
            raise ValueError("Invalid value for `gust`, must not be `None`")  # noqa: E501

        self._gust = gust

    @property
    def speed(self) -> float:
        """Gets the speed of this V1CurrentWeatherWind.


        :return: The speed of this V1CurrentWeatherWind.
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed: float):
        """Sets the speed of this V1CurrentWeatherWind.


        :param speed: The speed of this V1CurrentWeatherWind.
        :type speed: float
        """
        if speed is None:
            raise ValueError("Invalid value for `speed`, must not be `None`")  # noqa: E501

        self._speed = speed
