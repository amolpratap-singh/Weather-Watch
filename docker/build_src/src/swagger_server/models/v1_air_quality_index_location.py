# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class V1AirQualityIndexLocation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, country_code: str=None, district: str=None, lat: float=None, lon: float=None, pincode: int=None, post_office_name: str=None, state: str=None, taluka: str=None):  # noqa: E501
        """V1AirQualityIndexLocation - a model defined in Swagger

        :param country_code: The country_code of this V1AirQualityIndexLocation.  # noqa: E501
        :type country_code: str
        :param district: The district of this V1AirQualityIndexLocation.  # noqa: E501
        :type district: str
        :param lat: The lat of this V1AirQualityIndexLocation.  # noqa: E501
        :type lat: float
        :param lon: The lon of this V1AirQualityIndexLocation.  # noqa: E501
        :type lon: float
        :param pincode: The pincode of this V1AirQualityIndexLocation.  # noqa: E501
        :type pincode: int
        :param post_office_name: The post_office_name of this V1AirQualityIndexLocation.  # noqa: E501
        :type post_office_name: str
        :param state: The state of this V1AirQualityIndexLocation.  # noqa: E501
        :type state: str
        :param taluka: The taluka of this V1AirQualityIndexLocation.  # noqa: E501
        :type taluka: str
        """
        self.swagger_types = {
            'country_code': str,
            'district': str,
            'lat': float,
            'lon': float,
            'pincode': int,
            'post_office_name': str,
            'state': str,
            'taluka': str
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'district': 'district',
            'lat': 'lat',
            'lon': 'lon',
            'pincode': 'pincode',
            'post_office_name': 'postOfficeName',
            'state': 'state',
            'taluka': 'taluka'
        }
        self._country_code = country_code
        self._district = district
        self._lat = lat
        self._lon = lon
        self._pincode = pincode
        self._post_office_name = post_office_name
        self._state = state
        self._taluka = taluka

    @classmethod
    def from_dict(cls, dikt) -> 'V1AirQualityIndexLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The V1AirQualityIndex_location of this V1AirQualityIndexLocation.  # noqa: E501
        :rtype: V1AirQualityIndexLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self) -> str:
        """Gets the country_code of this V1AirQualityIndexLocation.


        :return: The country_code of this V1AirQualityIndexLocation.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code: str):
        """Sets the country_code of this V1AirQualityIndexLocation.


        :param country_code: The country_code of this V1AirQualityIndexLocation.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def district(self) -> str:
        """Gets the district of this V1AirQualityIndexLocation.


        :return: The district of this V1AirQualityIndexLocation.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district: str):
        """Sets the district of this V1AirQualityIndexLocation.


        :param district: The district of this V1AirQualityIndexLocation.
        :type district: str
        """
        if district is None:
            raise ValueError("Invalid value for `district`, must not be `None`")  # noqa: E501

        self._district = district

    @property
    def lat(self) -> float:
        """Gets the lat of this V1AirQualityIndexLocation.


        :return: The lat of this V1AirQualityIndexLocation.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this V1AirQualityIndexLocation.


        :param lat: The lat of this V1AirQualityIndexLocation.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lon(self) -> float:
        """Gets the lon of this V1AirQualityIndexLocation.


        :return: The lon of this V1AirQualityIndexLocation.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """Sets the lon of this V1AirQualityIndexLocation.


        :param lon: The lon of this V1AirQualityIndexLocation.
        :type lon: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon

    @property
    def pincode(self) -> int:
        """Gets the pincode of this V1AirQualityIndexLocation.


        :return: The pincode of this V1AirQualityIndexLocation.
        :rtype: int
        """
        return self._pincode

    @pincode.setter
    def pincode(self, pincode: int):
        """Sets the pincode of this V1AirQualityIndexLocation.


        :param pincode: The pincode of this V1AirQualityIndexLocation.
        :type pincode: int
        """
        if pincode is None:
            raise ValueError("Invalid value for `pincode`, must not be `None`")  # noqa: E501

        self._pincode = pincode

    @property
    def post_office_name(self) -> str:
        """Gets the post_office_name of this V1AirQualityIndexLocation.


        :return: The post_office_name of this V1AirQualityIndexLocation.
        :rtype: str
        """
        return self._post_office_name

    @post_office_name.setter
    def post_office_name(self, post_office_name: str):
        """Sets the post_office_name of this V1AirQualityIndexLocation.


        :param post_office_name: The post_office_name of this V1AirQualityIndexLocation.
        :type post_office_name: str
        """
        if post_office_name is None:
            raise ValueError("Invalid value for `post_office_name`, must not be `None`")  # noqa: E501

        self._post_office_name = post_office_name

    @property
    def state(self) -> str:
        """Gets the state of this V1AirQualityIndexLocation.


        :return: The state of this V1AirQualityIndexLocation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this V1AirQualityIndexLocation.


        :param state: The state of this V1AirQualityIndexLocation.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def taluka(self) -> str:
        """Gets the taluka of this V1AirQualityIndexLocation.


        :return: The taluka of this V1AirQualityIndexLocation.
        :rtype: str
        """
        return self._taluka

    @taluka.setter
    def taluka(self, taluka: str):
        """Sets the taluka of this V1AirQualityIndexLocation.


        :param taluka: The taluka of this V1AirQualityIndexLocation.
        :type taluka: str
        """
        if taluka is None:
            raise ValueError("Invalid value for `taluka`, must not be `None`")  # noqa: E501

        self._taluka = taluka
